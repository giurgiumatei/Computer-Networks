#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <netinet//ip.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <inttypes.h>
//uint32_t si size_t de aceeasi marime? (4 bytes)

#pragma clang diagnostic push
#pragma ide diagnostic ignored "EndlessLoop"


int main()
{
    char* host_name=(char*)malloc(100*sizeof(char ));
    gethostname(host_name,sizeof(host_name));
    printf("%s\n",host_name);

    int sock;
    struct sockaddr_in server,client;
    int socket_descriptor,l;

    sock=socket(AF_INET,SOCK_STREAM,0);
    if(sock<0)
    {
        printf(("Error connecting to socket!\n"));
        return 1;
    }

    memset(&server,0,sizeof(server));
    server.sin_port=htons(1234);
    server.sin_family=AF_INET;
    server.sin_addr.s_addr=INADDR_ANY;

    if(bind(sock,(struct sockaddr*)&server,sizeof(server))<0)
    {
        printf("This port is already in use!\n");
        return 1;
    }

    listen(sock,5);

    l=sizeof(client);
    memset(&client,0,sizeof(client));

    while (1)
    {

        uint16_t length;//lungimea sirului
        uint16_t* array;//sirul
        printf("Waiting clients...\n");
        socket_descriptor=accept(sock,(struct sockaddr*)&client,&l);
        printf("A client has connected!\n");

        recv(socket_descriptor, &length, sizeof(length), 0);
        length=ntohs(length);

        array=(uint16_t*)malloc(1000);

        uint16_t sum=0;
        for(int i=0;i<length;i++)
        {
            recv(socket_descriptor,array+i,sizeof(uint16_t),0);
            *(array+i)=ntohs(*(array+i));
            sum+=*(array+i);
        }

        printf("%hu\n",sum);
        sum=htons(sum);


        send(socket_descriptor,&sum,sizeof(sum),0);
        printf("Client has been served!\n");
        close(socket_descriptor);



    }




}